--SQL 기본 및 활용
		  		  
--문제3

--<테스트>
DROP TABLE TB_PLAYER_3;
CREATE TABLE TB_PLAYER_3
(
  PLAYER_ID CHAR(6)
, PLAYER_NM VARCHAR2(50)
, BIRTH_DE CHAR(8)
)
;

INSERT INTO TB_PLAYER_3 VALUES ('100001', '박찬호', '19730629');
INSERT INTO TB_PLAYER_3 VALUES ('100002', '박찬호', '19950605');
INSERT INTO TB_PLAYER_3 VALUES ('100003', '박지성', '19810225');
INSERT INTO TB_PLAYER_3 VALUES ('100004', '이승우', '19980106');

COMMIT;

--①
SELECT A.PLAYER_NM AS 선수명
  FROM TB_PLAYER_3 A
 WHERE A.BIRTH_DE >= '19800101'
   AND A.BIRTH_DE <= '19891231'
;

--②
SELECT TB_PLAYER_3.PLAYER_NM AS 선수명
FROM TB_PLAYER_3 TB_PLAYER_3
WHERE TB_PLAYER_3.BIRTH_DE >= '19800101'
AND TB_PLAYER_3.BIRTH_DE <= '19891231'
;

--③
SELECT TB_PLAYER_3.PLAYER_NM AS 선수명
FROM TB_PLAYER_3
WHERE TB_PLAYER_3.BIRTH_DE >= '19800101'
AND TB_PLAYER_3.BIRTH_DE <= '19891231'
;

--④ 정답 테이블에 앨리어스를 줄때 AS키워드를 사용하지 않는다. 
SELECT A.PLAYER_NM AS 선수명
FROM TB_PLAYER_3 AS A
WHERE A.BIRTH_DE >= '19800101'
AND A.BIRTH_DE <= '19891231'
;

			
--문제5

--<테스트>
DROP TABLE TB_EMP_5; 
            
CREATE TABLE TB_EMP_5
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50)
, MAJOR VARCHAR2(150)
, DEPT_CD CHAR(3)
)
;

INSERT INTO TB_EMP_5 VALUES ('100001', '이경오', '컴퓨터소프트웨어학', '101');
INSERT INTO TB_EMP_5 VALUES ('100002', '이수지', '데이터사이언스학'  , '101');
INSERT INTO TB_EMP_5 VALUES ('100003', '이지수', '컴퓨터공학'        , '101');
INSERT INTO TB_EMP_5 VALUES ('100004', '김성민', '컴퓨터공학'        , '102');
INSERT INTO TB_EMP_5 VALUES ('100005', '김민선', '데이터사이언스학'  , '102');
INSERT INTO TB_EMP_5 VALUES ('100006', '김선미', '컴퓨터소프트웨어학', '102');

COMMIT;							  			


SELECT * FROM TB_EMP_5;


--EMP_NO EMP_NM  MAJOR               DEPT_CD
-------- ------- ------------------- -------
--100001 이경오  컴퓨터소프트웨어학  101
--100002 이수지  데이터사이언스학    101
--100003 이지수  컴퓨터공학          101
--100004 김성민  컴퓨터공학          102
--100005 김민선  데이터사이언스학    102
--100006 김선미  컴퓨터소프트웨어학  102

--①
SELECT A.*
FROM TB_EMP_5 A
WHERE A.MAJOR LIKE '데이터_____' --언더바(_)의 개수는 5개임
  AND A.EMP_NM LIKE '이%'
;

--②
SELECT A.*
FROM TB_EMP_5 A
WHERE A.MAJOR LIKE '데이터%_____' --언더바(_)의 개수는 5개임
  AND A.EMP_NM LIKE '이%__' --언더바(_)의 개수는 2개임
;

--③
SELECT A.*
FROM TB_EMP_5 A
WHERE A.MAJOR LIKE '데이터_____%' --언더바(_)의 개수는 5개임
  AND A.EMP_NM LIKE '이__%' --언더바(_)의 개수는 2개임
;

--④ 정답
--EMP_NM이 모두 3글자임 언더바가 5개라서 집합이 안나옴
SELECT A.*
FROM TB_EMP_5 A
WHERE A.MAJOR LIKE '데이터_____' --언더바(_)의 개수는 5개임
  AND A.EMP_NM LIKE '이_____%' --언더바(_)의 개수는 5개임
;

--문제6

DROP TABLE TB_EMP_6;

CREATE TABLE TB_EMP_6
(
  EMP_NO CHAR(6) NOT NULL
, EMP_NM VARCHAR2(50) NOT NULL
, JOIN_DT DATE NULL
, CONSTRAINT TB_EMP_6_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_6 VALUES ('100001', '이경오', TO_DATE('20200316090000', 'YYYYMMDDHH24MISS'));
INSERT INTO TB_EMP_6 VALUES ('100002', '이수지', TO_DATE('20200816090000', 'YYYYMMDDHH24MISS'));
INSERT INTO TB_EMP_6 VALUES ('100003', '김정훈', NULL                                         );
INSERT INTO TB_EMP_6 VALUES ('100004', '박수진', TO_DATE('20190211090000', 'YYYYMMDDHH24MISS'));
INSERT INTO TB_EMP_6 VALUES ('100005', '최동진', TO_DATE('20190311090000', 'YYYYMMDDHH24MISS'));

COMMIT;

--<SQL문>

--2가 나옴
--JOIN_DT가 널인 행은 집합에서 제외딤
SELECT COUNT(*) CNT
FROM TB_EMP_6 A
WHERE A.JOIN_DT NOT BETWEEN TO_DATE('20200101000000', 'YYYYMMDDHH24MISS')
                        AND TO_DATE('20201231235959', 'YYYYMMDDHH24MISS')
;

			
--NOT BETWEEN으로 비교한 경우 JOIN_DT의 값이 NULL인 김정훈은 결과집합에서 제외된다.
--'김정훈'까지 결과집합에 넣고자 한다면 아래와 같이 SQL문을 실행해야 한다.

SELECT COUNT(*) CNT
 FROM TB_EMP_6 A
 WHERE A.JOIN_DT NOT BETWEEN TO_DATE('20200101000000', 'YYYYMMDDHH24MISS')
                         AND TO_DATE('20201231235959', 'YYYYMMDDHH24MISS')
    OR A.JOIN_DT IS NULL
		  ;		
          
SELECT *
 FROM TB_EMP_6 A
 WHERE A.JOIN_DT NOT BETWEEN TO_DATE('20200101000000', 'YYYYMMDDHH24MISS')
                         AND TO_DATE('20201231235959', 'YYYYMMDDHH24MISS')
    OR A.JOIN_DT IS NULL
		  ;		          
		  
--문제7

--<SQL문>
SELECT CASE WHEN 1 = 1 THEN 1 ELSE 0 ㉠ AS RESULT
 FROM DUAL
;     

--<테스트>
SELECT CASE WHEN 1 = 1 THEN 1 ELSE 0 END AS RESULT --1이 나옴
  FROM DUAL
;
      
--문제8

--<SQL문>
SELECT TO_DATE('20200901'||'120000', 'YYYYMMDDHH24MISS') - 1/24/60 AS RESULT_VAL --1분이 마이너스됨
  FROM DUAL;

--<테스트>
SELECT TO_DATE('20200901'||'120000', 'YYYYMMDDHH24MISS') - 1/24/60 AS RESULT_VAL --1분이 마이너스됨
  FROM DUAL; 

SELECT TO_DATE('20200901'||'120000', 'YYYYMMDDHH24MISS') - (1/24/60/60) * 60 AS RESULT_VAL --1분이 마이너스됨
  FROM DUAL; 
        
--문제9

DROP TABLE TB_EMP_9; 

CREATE TABLE TB_EMP_9
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, DEPT_CD CHAR(3) NULL
, CONSTRAINT TB_EMP_9_PK PRIMARY KEY(EMP_NO)
)
;

INSERT INTO TB_EMP_9 VALUES ('100001', '이경오', '101');
INSERT INTO TB_EMP_9 VALUES ('100002', '김태호', '101');
INSERT INTO TB_EMP_9 VALUES ('100003', '박태훈', '102');
INSERT INTO TB_EMP_9 VALUES ('100004', '김수지', '102');
INSERT INTO TB_EMP_9 VALUES ('100005', '황정식', '103');
INSERT INTO TB_EMP_9 VALUES ('100006', '황태섭', '103');
INSERT INTO TB_EMP_9 VALUES ('100007', '김미선', '104');
INSERT INTO TB_EMP_9 VALUES ('100008', '박수경', '104');
INSERT INTO TB_EMP_9 VALUES ('100009', '최태경',  NULL);
INSERT INTO TB_EMP_9 VALUES ('100010', '김승리',  NULL);

COMMIT;

--<SQL문>
SELECT DEPT_CD AS DEPT_CD --DEPT_CD + NULL 출력
     , COUNT(DEPT_CD) AS DEPT_CD_CNT --DEPT_CD의 행 출력, NULL은 0으로 출력
     , COUNT(*) AS CNT --모두 2로 출력, 널도 개수에 포함
  FROM TB_EMP_9
GROUP BY DEPT_CD
ORDER BY DEPT_CD
;

DEPT_CD DEPT_CD_CNT CNT       
------- ----------- --------- 
101               2         2
102               2         2
103               2         2
104               2         2
NULL              0         2
 			
--문제10

DROP TABLE TB_PLAYER_10; 

CREATE TABLE TB_PLAYER_10
(
  PLAYER_ID CHAR(6)
, PLAYER_NM VARCHAR2(50) NOT NULL
, POS_NM VARCHAR2(5)
, BIRTH_DE CHAR(8) NOT NULL
, HEIGHT NUMBER(10, 2) NOT NULL
, WEIGHT NUMBER(10, 2) NOT NULL
, CONSTRAINT TB_PLAYER_10_PK PRIMARY KEY (PLAYER_ID)
)
;

INSERT INTO TB_PLAYER_10 VALUES ('100001', '황선홍', 'FW' ,  '19680714', '183.4', '81.2');
INSERT INTO TB_PLAYER_10 VALUES ('100002', '안정환', 'FW' ,  '19760127', '178.1', '68.3');
INSERT INTO TB_PLAYER_10 VALUES ('100003', '박지성', 'MF',  '19810330', '175.2', '71.2');
INSERT INTO TB_PLAYER_10 VALUES ('100004', '유상철', 'MF' ,  '19711018', '184.1', '77.8');
INSERT INTO TB_PLAYER_10 VALUES ('100005', '이천수', 'MF' ,  '19810709', '172.1', '63.1');
INSERT INTO TB_PLAYER_10 VALUES ('100006', '설기현', 'MF' ,  '19790204', '187.1', '77.2');
INSERT INTO TB_PLAYER_10 VALUES ('100007', '차두리', 'DF' ,  '19800725', '181.1', '75.8');
INSERT INTO TB_PLAYER_10 VALUES ('100008', '이영표', 'DF' ,  '19770423', '177.4', '70.2');
INSERT INTO TB_PLAYER_10 VALUES ('100009', '홍명보', 'DF' ,  '19690212', '181.1', '72.4');
INSERT INTO TB_PLAYER_10 VALUES ('100010', '최진철', 'DF' ,  '19710326', '187.8', '86.1');
INSERT INTO TB_PLAYER_10 VALUES ('100011', '이운재', 'GK' ,  '19730426', '182.1', '88.1');

COMMIT;


--①
SELECT A.POS_NM AS 포지션
  FROM TB_PLAYER_10 A
GROUP BY A.POS_NM
ORDER BY A.POS_NM
;

--②
SELECT A.POS_NM AS 포지션
FROM TB_PLAYER_10 A
GROUP BY A.POS_NM
ORDER BY 포지션
;

--③
SELECT 포지션
FROM
(
SELECT A.POS_NM AS 포지션
  FROM TB_PLAYER_10 A
GROUP BY A.POS_NM
) A
ORDER BY 포지션
;

--④ 정답
SELECT A.포지션 --'A.포지션'으로 해야함 
FROM
(
SELECT A.POS_NM AS 포지션 --해당 칼럼은 '포지션'이 됨
  FROM TB_PLAYER_10 A
GROUP BY A.POS_NM
) A
ORDER BY A.POS_NM
;

--ORA-00904: "A"."POS_NM": 부적합한 식별자

		
--문제11

DROP TABLE TB_PLAYER_11; 

CREATE TABLE TB_PLAYER_11
(
  PLAYER_ID CHAR(6)
, PLAYER_NM VARCHAR2(50) NOT NULL
, POS_NM VARCHAR2(5)
, BIRTH_DE CHAR(8) NOT NULL
, HEIGHT NUMBER(10, 2) NOT NULL
, WEIGHT NUMBER(10, 2) NOT NULL
, CONSTRAINT TB_PLAYER_11_PK PRIMARY KEY (PLAYER_ID)
)
;

INSERT INTO TB_PLAYER_11 VALUES ('100001', '황선홍', 'FW' ,  '19680714', '183.4', '81.2');
INSERT INTO TB_PLAYER_11 VALUES ('100002', '안정환', 'FW' ,  '19760127', '178.1', '68.3');
INSERT INTO TB_PLAYER_11 VALUES ('100003', '박지성', 'MF',  '19810330', '175.2', '71.2');
INSERT INTO TB_PLAYER_11 VALUES ('100004', '유상철', 'MF' ,  '19711018', '184.1', '77.8');
INSERT INTO TB_PLAYER_11 VALUES ('100005', '이천수', 'MF' ,  '19810709', '172.1', '63.1');
INSERT INTO TB_PLAYER_11 VALUES ('100006', '설기현', 'MF' ,  '19790204', '187.1', '77.2');
INSERT INTO TB_PLAYER_11 VALUES ('100007', '차두리', 'DF' ,  '19800725', '181.1', '75.8');
INSERT INTO TB_PLAYER_11 VALUES ('100008', '이영표', 'DF' ,  '19770423', '177.4', '70.2');
INSERT INTO TB_PLAYER_11 VALUES ('100009', '홍명보', 'DF' ,  '19690212', '181.1', '72.4');
INSERT INTO TB_PLAYER_11 VALUES ('100010', '최진철', 'DF' ,  '19710326', '187.8', '86.1');
INSERT INTO TB_PLAYER_11 VALUES ('100011', '이운재', 'GK' ,  '19730426', '182.1', '88.1');

COMMIT;

--<SQL문>
SELECT
       SUM(CASE WHEN A.POS_NM = 'FW' THEN 1 ELSE 0 END) AS FW_CNT
     , SUM(CASE WHEN A.POS_NM = 'MF' THEN 1 ELSE 0 END) AS MF_CNT
     , SUM(CASE WHEN A.POS_NM = 'DF' THEN 1 ELSE 0 END) AS DF_CNT
     , SUM(CASE WHEN A.POS_NM = 'GK' THEN 1 ELSE 0 END) AS GK_CNT
  FROM TB_PLAYER_11 A
  ;

--<새로운SQL문>
SELECT
       SUM(DECODE(A.POS_NM, 'FW', 1, 0)) AS FW_CNT
     , SUM(DECODE(A.POS_NM, 'MF', 1, 0)) AS MF_CNT
     , SUM(DECODE(A.POS_NM, 'DF', 1, 0)) AS DF_CNT
     , SUM(DECODE(A.POS_NM, 'GK', 1, 0)) AS GK_CNT
  FROM TB_PLAYER_11 A
;

    
--문제12

DROP TABLE TB_EMP_SAL_12; 
CREATE TABLE TB_EMP_SAL_12
(
  EMP_NO CHAR(6)
, STD_YYYY CHAR(4)
, SAL NUMBER(15) NULL
, CONSTRAINT TB_EMP_SAL_12_PK PRIMARY KEY(EMP_NO, STD_YYYY)
)
;

INSERT INTO TB_EMP_SAL_12 VALUES ('100001', '2020', '70000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100001', '2019', '65000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100001', '2018', '60000000');

INSERT INTO TB_EMP_SAL_12 VALUES ('100002', '2020', '60000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100002', '2019', '55000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100002', '2018', '50000000');


INSERT INTO TB_EMP_SAL_12 VALUES ('100003', '2020', '50000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100003', '2019', '45000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100003', '2018', '40000000');

INSERT INTO TB_EMP_SAL_12 VALUES ('100004', '2020', '40000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100004', '2019', '35000000');
INSERT INTO TB_EMP_SAL_12 VALUES ('100004', '2018', '30000000');

INSERT INTO TB_EMP_SAL_12 VALUES ('100005', '2020',  NULL     );
INSERT INTO TB_EMP_SAL_12 VALUES ('100005', '2019',  NULL     );
INSERT INTO TB_EMP_SAL_12 VALUES ('100005', '2018',  NULL     );

COMMIT;

--①
SELECT A.SAL AS SAL
FROM
(
SELECT A.SAL
  FROM TB_EMP_SAL_12 A
 WHERE A.STD_YYYY = '2019'
 ORDER BY NVL(A.SAL, 0) DESC
 ) A
WHERE ROWNUM <= 1;

--②
SELECT MAX(A.SAL) AS SAL
  FROM TB_EMP_SAL_12 A
 WHERE A.STD_YYYY = '2019'
 ;

--③ 정답
SELECT A.SAL AS SAL
FROM
(
SELECT A.SAL
  FROM TB_EMP_SAL_12 A
 WHERE A.STD_YYYY = '2019'
 ORDER BY CASE WHEN A.SAL IS NULL THEN 999999999999999 ELSE 0 END DESC --SAL가 널인건이 가장 높은값으로 인식하게됨 (DESC정렬)
 ) A
WHERE ROWNUM <= 1
;

--④
SELECT A.SAL AS SAL
FROM
(
SELECT A.SAL
  FROM TB_EMP_SAL_12 A
 WHERE A.STD_YYYY = '2019'
 ORDER BY DECODE(A.SAL, NULL, 0, A.SAL)  DESC
 ) A
WHERE ROWNUM <= 1
;

		
--문제13
		
DROP TABLE TB_EMP_SAL_13; 

CREATE TABLE TB_EMP_SAL_13
(
  EMP_NO CHAR(6)
, STD_YYYY CHAR(4)
, SAL NUMBER(15) NULL
, CONSTRAINT TB_EMP_SAL_13_PK PRIMARY KEY(EMP_NO, STD_YYYY)
)
;

INSERT INTO TB_EMP_SAL_13 VALUES ('100001', '2020', '70000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100001', '2019', '65000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100001', '2018', '60000000');

INSERT INTO TB_EMP_SAL_13 VALUES ('100002', '2020', '60000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100002', '2019', '55000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100002', '2018', '50000000');


INSERT INTO TB_EMP_SAL_13 VALUES ('100003', '2020', '50000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100003', '2019', '45000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100003', '2018', '40000000');

INSERT INTO TB_EMP_SAL_13 VALUES ('100004', '2020', '40000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100004', '2019', '35000000');
INSERT INTO TB_EMP_SAL_13 VALUES ('100004', '2018', '30000000');

INSERT INTO TB_EMP_SAL_13 VALUES ('100005', '2020',  NULL     );
INSERT INTO TB_EMP_SAL_13 VALUES ('100005', '2019',  NULL     );
INSERT INTO TB_EMP_SAL_13 VALUES ('100005', '2018',  NULL     );

COMMIT;

--<SQL문>
SELECT *
FROM TB_EMP_SAL_13 A
WHERE STD_YYYY = '2019'
 AND ROWNUM <= 1
ORDER BY A.SAL DESC
;
	
--만약 2019년도 기준으로 연봉이 가장 높은 단 한건을 뽑고 싶다면 아래와 같은 SQL문을 사용한다.

SELECT *
FROM
 (
    SELECT *
      FROM TB_EMP_SAL_13 A
     WHERE STD_YYYY = '2019'
     AND A.SAL IS NOT NULL --SAL가 NOT NULL인 건 중에서
     ORDER BY A.SAL DESC --SAL 칼럼으로 역순 정렬 
 )
WHERE ROWNUM <= 1
;
	  
--문제14

DROP TABLE TB_EMP_SAL_14; 
DROP TABLE TB_EMP_14; 

CREATE TABLE TB_EMP_14
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, CONSTRAINT TB_EMP_14_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_14 VALUES ('100001', '이경오');
INSERT INTO TB_EMP_14 VALUES ('100002', '이수지');

COMMIT;

CREATE TABLE TB_EMP_SAL_14
(
  EMP_NO CHAR(6)
, SAL_STD_YYYY CHAR(8)
, SAL NUMBER
, CONSTRAINT TB_EMP_SAL_14_PK PRIMARY KEY (EMP_NO, SAL_STD_YYYY)
)
;

ALTER TABLE TB_EMP_SAL_14
ADD CONSTRAINTS TB_EMP_SAL_14_FK FOREIGN KEY (EMP_NO)
REFERENCES TB_EMP_14(EMP_NO)
;


INSERT INTO TB_EMP_SAL_14 VALUES ('100001', '2020', 75000000);
INSERT INTO TB_EMP_SAL_14 VALUES ('100001', '2019', 65000000);
INSERT INTO TB_EMP_SAL_14 VALUES ('100001', '2018', 55000000);
INSERT INTO TB_EMP_SAL_14 VALUES ('100002', '2020', 55000000);
INSERT INTO TB_EMP_SAL_14 VALUES ('100002', '2019', 35000000);
INSERT INTO TB_EMP_SAL_14 VALUES ('100002', '2018', 25000000);

COMMIT;

--<SQL문>
SELECT COUNT(DISTINCT A.EMP_NO) + --2가 나옴(100001, 100002)
       COUNT(DISTINCT B.SAL_STD_YYYY) + --3이 나옴(2018,2019,2020)
       COUNT(DISTINCT B.SAL) AS CNT_SUM --5가 난옴(2500만, 3500만, 5500만, 6500만, 7500만) 총 합계는 10이 나옴
  FROM TB_EMP_14 A
     , TB_EMP_SAL_14 B
 WHERE A.EMP_NO = B.EMP_NO
 ;


--<테스트>

SELECT COUNT(DISTINCT A.EMP_NO) + COUNT(DISTINCT B.SAL_STD_YYYY) + COUNT(DISTINCT B.SAL) AS CNT_SUM --총 합계는 10이 나옴
     , COUNT(DISTINCT A.EMP_NO) COUNT_DISTINCT_EMP_NO --2가 나옴(100001, 100002)
     , COUNT(DISTINCT B.SAL_STD_YYYY) COUNT_DISTINCT_SAL_STD_YYYY --3이 나옴(2018,2019,2020)
     , COUNT(DISTINCT B.SAL) COUNT_DISTINCT_SAL --5가 난옴(2500만, 3500만, 5500만, 6500만, 7500만)
  FROM TB_EMP_14 A
     , TB_EMP_SAL_14 B
 WHERE A.EMP_NO = B.EMP_NO
;
			
--문제17

DROP TABLE TB_EMP_17;
DROP TABLE TB_DEPT_17;

CREATE TABLE TB_DEPT_17
(
  DEPT_NO CHAR(6)
, DEPT_NM VARCHAR2(150) NOT NULL
, CONSTRAINT TB_DEPT_17_PK PRIMARY KEY (DEPT_NO)
)
;

INSERT INTO TB_DEPT_17 VALUES ('D00001', 'Data시각화팀');
INSERT INTO TB_DEPT_17 VALUES ('D00002', 'Data플랫폼팀');
INSERT INTO TB_DEPT_17 VALUES ('D00003', 'Data분석팀'  );

COMMIT;

CREATE TABLE TB_EMP_17
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, DEPT_NO CHAR(6)
, CONSTRAINT TB_EMP_17_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_17 VALUES ('E00001', '이경오', 'D00001');
INSERT INTO TB_EMP_17 VALUES ('E00002', '이수지', 'D00001');
INSERT INTO TB_EMP_17 VALUES ('E00003', '김효선', 'D00002');
INSERT INTO TB_EMP_17 VALUES ('E00004', '박상진', 'D00003');


COMMIT;

ALTER TABLE TB_EMP_17
ADD CONSTRAINTS TB_EMP_17_FK FOREIGN KEY (DEPT_NO)
REFERENCES TB_DEPT_17(DEPT_NO)
;


--<SQL문>
SELECT A.DEPT_NO, A.DEPT_NM, B.EMP_NO, B.EMP_NM
  FROM TB_DEPT_17 A LEFT OUTER JOIN TB_EMP_17 B --TB_DEPT_17은 다나옴
    ON (A.DEPT_NO = B.DEPT_NO AND A.DEPT_NM = 'Data시각화팀') --매칭되는 TB_EMP_17은 'Data시각화팀'만 나오게됨
  WHERE A.DEPT_NO IS NOT NULL
;

			
--문제19

DROP TABLE TB_EMP_19;
DROP TABLE TB_DEPT_19;

CREATE TABLE TB_DEPT_19
(
  DEPT_NO CHAR(6)
, DEPT_NM VARCHAR2(150) NOT NULL
, CONSTRAINT TB_DEPT_19_PK PRIMARY KEY (DEPT_NO)
)
;

INSERT INTO TB_DEPT_19 VALUES ('D00001', 'Data시각화팀');
INSERT INTO TB_DEPT_19 VALUES ('D00002', 'Data플랫폼팀');
INSERT INTO TB_DEPT_19 VALUES ('D00003', 'Data분석팀');

COMMIT;

CREATE TABLE TB_EMP_19
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, DEPT_NO CHAR(6)
, CONSTRAINT TB_EMP_19_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_19 VALUES ('E00001', '이경오', 'D00001');
INSERT INTO TB_EMP_19 VALUES ('E00002', '이수지', 'D00001');
INSERT INTO TB_EMP_19 VALUES ('E00003', '김효선', 'D00002');
INSERT INTO TB_EMP_19 VALUES ('E00004', '박상진', 'D00003');


COMMIT;

ALTER TABLE TB_EMP_19
ADD CONSTRAINTS TB_EMP_19_FK FOREIGN KEY (DEPT_NO)
REFERENCES TB_DEPT_19(DEPT_NO)
;

--<SQL문>
SELECT DEPT_NO -- GROUP BY 되어 'D00001'만 나오게됨
 FROM
    (
    SELECT A.DEPT_NO
      FROM TB_EMP_19 A
     WHERE A.DEPT_NO = 'D00001'
    MINUS
    SELECT A.DEPT_NO
      FROM TB_EMP_19 A
     WHERE A.DEPT_NO = 'D00002'
     ORDER BY DEPT_NO
   )
GROUP BY DEPT_NO --GROUP BY 하고 있음
;

					
--문제20

DROP TABLE TB_DEPT_20;

CREATE TABLE TB_DEPT_20
(
  DEPT_NO CHAR(6)
, DEPT_NM VARCHAR2(150) NOT NULL
, UPPER_DEPT_NO CHAR(6) NULL
, CONSTRAINT TB_DEPT_20_PK PRIMARY KEY (DEPT_NO)
)
;

INSERT INTO TB_DEPT_20 VALUES ('D00001', '회장실'        ,  NULL   );

INSERT INTO TB_DEPT_20 VALUES ('D00002', '영업본부'      , 'D00001');
INSERT INTO TB_DEPT_20 VALUES ('D00003', '기술본부'      , 'D00001');

INSERT INTO TB_DEPT_20 VALUES ('D00004', '국내영업부'    , 'D00002');
INSERT INTO TB_DEPT_20 VALUES ('D00005', '해외영업부'    , 'D00002');

INSERT INTO TB_DEPT_20 VALUES ('D00006', '개발사업부'    , 'D00003');
INSERT INTO TB_DEPT_20 VALUES ('D00007', '데이터사업부'  , 'D00003');

INSERT INTO TB_DEPT_20 VALUES ('D00008', '기업영업팀'    , 'D00004');
INSERT INTO TB_DEPT_20 VALUES ('D00009', '공공영업팀'    , 'D00004');

INSERT INTO TB_DEPT_20 VALUES ('D00010', '북미영업팀'    , 'D00005');
INSERT INTO TB_DEPT_20 VALUES ('D00011', '남미영업팀'    , 'D00005');

INSERT INTO TB_DEPT_20 VALUES ('D00012', '서버개발팀'    , 'D00006');
INSERT INTO TB_DEPT_20 VALUES ('D00013', '화면개발팀'    , 'D00006');

INSERT INTO TB_DEPT_20 VALUES ('D00014', '오라클기술팀'  , 'D00007');
INSERT INTO TB_DEPT_20 VALUES ('D00015', '오픈소스기술팀', 'D00007');

COMMIT;

--<SQL문>
SELECT DEPT_NO, LPAD(' ', 4 * (LEVEL -1)) || DEPT_NM AS DEPT_NM
     , UPPER_DEPT_NO
     , LEVEL AS LVL
 FROM TB_DEPT_20
 START WITH UPPER_DEPT_NO IS NULL --'회장실' 부터 시작 해당 행은 무조건 나옴
 CONNECT BY PRIOR DEPT_NO = UPPER_DEPT_NO --'회장실'의 DEPT_NO가 UPPER_DEPT_NO인데 
              AND DEPT_NM LIKE '영업%' --DEPT_NM이 '영업'으로 시작하는 부서 나옴 
 ;
		
			
--문제21

DROP TABLE TB_DEPT_21;

CREATE TABLE TB_DEPT_21
(
  DEPT_NO CHAR(6)
, DEPT_NM VARCHAR2(150) NOT NULL
, UPPER_DEPT_NO CHAR(6) NULL
, CONSTRAINT TB_DEPT_21_PK PRIMARY KEY (DEPT_NO)
)
;

INSERT INTO TB_DEPT_21 VALUES ('D00001', '회장실'        ,  NULL   );

INSERT INTO TB_DEPT_21 VALUES ('D00002', '영업본부'      , 'D00001');
INSERT INTO TB_DEPT_21 VALUES ('D00003', '기술본부'      , 'D00001');

INSERT INTO TB_DEPT_21 VALUES ('D00004', '국내영업부'    , 'D00002');
INSERT INTO TB_DEPT_21 VALUES ('D00005', '해외영업부'    , 'D00002');

INSERT INTO TB_DEPT_21 VALUES ('D00006', '개발사업부'    , 'D00003');
INSERT INTO TB_DEPT_21 VALUES ('D00007', '데이터사업부'  , 'D00003');

INSERT INTO TB_DEPT_21 VALUES ('D00008', '기업영업팀'    , 'D00004');
INSERT INTO TB_DEPT_21 VALUES ('D00009', '공공영업팀'    , 'D00004');

INSERT INTO TB_DEPT_21 VALUES ('D00010', '북미영업팀'    , 'D00005');
INSERT INTO TB_DEPT_21 VALUES ('D00011', '남미영업팀'    , 'D00005');

INSERT INTO TB_DEPT_21 VALUES ('D00012', '서버개발팀'    , 'D00006');
INSERT INTO TB_DEPT_21 VALUES ('D00013', '화면개발팀'    , 'D00006');

INSERT INTO TB_DEPT_21 VALUES ('D00014', '오라클기술팀'  , 'D00007');
INSERT INTO TB_DEPT_21 VALUES ('D00015', '오픈소스기술팀', 'D00007');

COMMIT;

--<SQL문>
SELECT B.DEPT_NO, B.DEPT_NM, B.UPPER_DEPT_NO, A.UPPER_DEPT_NO
  FROM TB_DEPT_21 A ㉠ OUTER JOIN TB_DEPT_21 B
    ON (B.UPPER_DEPT_NO = A.DEPT_NO)
 WHERE A.UPPER_DEPT_NO IS NULL
ORDER BY B.DEPT_NO;


--<테스트>
SELECT B.DEPT_NO, B.DEPT_NM, B.UPPER_DEPT_NO, A.UPPER_DEPT_NO
  FROM TB_DEPT_21 A RIGHT OUTER JOIN TB_DEPT_21 B --B집합이 다나옴
    ON (B.UPPER_DEPT_NO = A.DEPT_NO)
 WHERE A.UPPER_DEPT_NO IS NULL --'D00002', 'D00003'의 상위부서인 'D00001'은 상위부서가 없음
ORDER BY B.DEPT_NO
;

--DEPT_NO DEPT_NM    UPPER_DEPT_NO UPPER_DEPT_NO 
--------- ---------- ------------- ------------- 
--D00001  회장실     NULL          NULL                  
--D00002  영업본부   D00001        NULL             
--D00003  기술본부   D00001        NULL             

			
		  
--문제23

DROP TABLE TB_EMP_23;
DROP TABLE TB_DEPT_23;

CREATE TABLE TB_DEPT_23
(
  DEPT_CD CHAR(4)
, DEPT_NM VARCHAR2(150) NOT NULL
)
;

ALTER TABLE TB_DEPT_23
ADD CONSTRAINT TB_DEPT_23_PK PRIMARY KEY (DEPT_CD);

INSERT INTO TB_DEPT_23 (DEPT_CD, DEPT_NM) VALUES ('D001', 'Data시각화팀');
INSERT INTO TB_DEPT_23 (DEPT_CD, DEPT_NM) VALUES ('D002', 'Data플랫폼팀');
INSERT INTO TB_DEPT_23 (DEPT_CD, DEPT_NM) VALUES ('D003', 'Data분석팀'  );

COMMIT;

CREATE TABLE TB_EMP_23
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, SEX_CD CHAR(1)
, BIRTH_DE CHAR(8) NOT NULL
, DEPT_CD CHAR(4)
)
;

ALTER TABLE TB_EMP_23
ADD CONSTRAINT TB_EMP_23_PK PRIMARY KEY (EMP_NO);

ALTER TABLE TB_EMP_23
ADD CONSTRAINT TB_EMP_23_FK FOREIGN KEY (DEPT_CD) REFERENCES TB_DEPT_23(DEPT_CD);

INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00001', '이경오', '1', '19840718', 'D001');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00002', '이수지', '2', '19940502', 'D001');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00003', '박경민', '1', '19830414', 'D002');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00004', '최주연', '2', '19920508', 'D002');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00005', '최철순', '1', '19860112', 'D003');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00006', '이지연', '2', '19960218', 'D003');
INSERT INTO TB_EMP_23 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00007', '차은영', '2', '19980218',  NULL );

COMMIT;


--① 정답
SELECT *
  FROM TB_EMP_23 A
 WHERE NOT EXISTS (SELECT 1
                     FROM TB_DEPT_23 B
                    WHERE B.DEPT_CD = A.DEPT_CD --부서로 매칭되지 않은, 즉 부서가 NULL인 '차은영'만 출력됨
                  )
;


--②
SELECT *
  FROM TB_EMP_23 A
 WHERE EXISTS (SELECT 1
                     FROM TB_DEPT_23 B
                    WHERE B.DEPT_CD <> A.DEPT_CD --직원이 속한 부서와 다른 부서가 존재하기만 하면 다나오게됨
                  )
;


--③
 SELECT *
  FROM TB_EMP_23 A
 WHERE A.DEPT_CD NOT IN (SELECT B.DEPT_CD --NOT조건이라 DEPT_CD가 NULL인 건은 나오지 못함
                          FROM TB_DEPT_23 B
                        )
 ;



--④
SELECT *
  FROM TB_EMP_23 A
 WHERE NOT A.DEPT_CD IN (SELECT B.DEPT_CD --NOT조건이라 DEPT_CD가 NULL인 건은 비교에 실패함
                          FROM TB_DEPT_23 B
                        )
;

		
--문제24

DROP TABLE TB_EMP_24;

CREATE TABLE TB_EMP_24
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, SEX_CD CHAR(1)
, BIRTH_DE CHAR(8) NOT NULL
, DEPT_CD CHAR(4)
)
;

ALTER TABLE TB_EMP_24
ADD CONSTRAINT TB_EMP_24_PK PRIMARY KEY (EMP_NO);

INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00001', '이경오', '1', '19840718', 'D001');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00002', '이수지', '2', '19940502', 'D001');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00003', '박경민', '1', '19830414', 'D002');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00004', '최주연', '2', '19920508', 'D002');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00005', '최철순', '1', '19860112', 'D003');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00006', '이지연', '2', '19960218', 'D003');
INSERT INTO TB_EMP_24 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00007', '차은영', '2', '19980218',  NULL );

COMMIT;

DROP VIEW V_TB_EMP_24; 
CREATE OR REPLACE VIEW V_TB_EMP_24 AS
SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.BIRTH_DE, A.DEPT_CD
  FROM TB_EMP_24 A
 WHERE A.DEPT_CD IS NULL
    OR A.SEX_CD = '1'
;


--<SQL문>
SELECT COUNT(*) CNT
  FROM V_TB_EMP_24 A
  WHERE A.SEX_CD = '2'
  HAVING COUNT(*) >= 0 --DEPT_CD가 널이면서 SEX_CD가 '2'인 차은영 사원이 포함됨
  ;

 		
--문제25

DROP TABLE TB_EMP_25;
DROP TABLE TB_DEPT_25;

CREATE TABLE TB_DEPT_25
(
  DEPT_CD CHAR(4)
, DEPT_NM VARCHAR2(150) NOT NULL
, CONSTRAINT TB_DEPT_25_PK PRIMARY KEY(DEPT_CD)
)
;

CREATE TABLE TB_EMP_25
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, JOB_NM VARCHAR2(150) NULL
, CUR_SAL NUMBER
, DEPT_CD CHAR(4)
, CONSTRAINT TB_EMP_25_PK PRIMARY KEY(EMP_NO)
)
;

ALTER TABLE TB_EMP_25
ADD CONSTRAINT TB_EMP_25_FK FOREIGN KEY (DEPT_CD) REFERENCES TB_DEPT_25(DEPT_CD);

INSERT INTO TB_DEPT_25 VALUES ('D101', '데이터개발팀'        );
INSERT INTO TB_DEPT_25 VALUES ('D102', '데이터플랫폼팀'      );
INSERT INTO TB_DEPT_25 VALUES ('D103', '데이터사이언스팀'    );
INSERT INTO TB_DEPT_25 VALUES ('D104', '데이터성능팀'        );
INSERT INTO TB_DEPT_25 VALUES ('D105', '데이터마이그레이션팀');

COMMIT;

INSERT INTO TB_EMP_25 VALUES ('100001', '이경오', 'SQL개발자', 45000000, 'D101');
INSERT INTO TB_EMP_25 VALUES ('100002', '이동민', 'SQL개발자', 40000000, 'D101');

INSERT INTO TB_EMP_25 VALUES ('100003', '김철수', 'SQL개발자', 40000000, 'D102');
INSERT INTO TB_EMP_25 VALUES ('100004', '박상진', 'SQL개발자', 35000000, 'D102');


INSERT INTO TB_EMP_25 VALUES ('100005', '박은정', 'SQL개발자', 50000000, 'D103');
INSERT INTO TB_EMP_25 VALUES ('100006', '김다연', 'SQL개발자', 45000000, 'D103');


INSERT INTO TB_EMP_25 VALUES ('100007', '박수진', 'SQL개발자', 65000000, 'D104');
INSERT INTO TB_EMP_25 VALUES ('100008', '김성수', 'SQL개발자', 60000000, 'D104');

INSERT INTO TB_EMP_25 VALUES ('100009', '추상미', 'SQL개발자', 35000000, 'D105');
INSERT INTO TB_EMP_25 VALUES ('100010', '박나래', 'SQL개발자', 30000000, 'D105');

COMMIT;

SELECT JOB_NM
     , B.DEPT_NM
     , AVG(A.CUR_SAL) AS CUR_SAL
  FROM TB_EMP_25 A
     , TB_DEPT_25 B
WHERE A.DEPT_CD = B.DEPT_CD
GROUP BY ROLLUP (A.JOB_NM, B.DEPT_NM) --JOB+DEPT_NM별, JOB별, 전체
;

	  
--문제26

DROP TABLE TB_EMP_26 ;
DROP TABLE TB_DEPT_26 ;

CREATE TABLE TB_DEPT_26
(
  DEPT_CD CHAR(4)
, DEPT_NM VARCHAR2(150) NOT NULL
, CONSTRAINT TB_DEPT_26_PK PRIMARY KEY(DEPT_CD)
)
;


CREATE TABLE TB_EMP_26
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, JOB_NM VARCHAR2(150) NULL
, CUR_SAL NUMBER
, DEPT_CD CHAR(4)
, CONSTRAINT TB_EMP_26_PK PRIMARY KEY(EMP_NO)
)
;

ALTER TABLE TB_EMP_26
ADD CONSTRAINT TB_EMP_26_FK FOREIGN KEY (DEPT_CD) REFERENCES TB_DEPT_26(DEPT_CD);

INSERT INTO TB_DEPT_26 VALUES ('D101', '데이터개발팀');
INSERT INTO TB_DEPT_26 VALUES ('D102', '데이터플랫폼팀');
INSERT INTO TB_DEPT_26 VALUES ('D103', '데이터사이언스팀');
INSERT INTO TB_DEPT_26 VALUES ('D104', '데이터성능팀');
INSERT INTO TB_DEPT_26 VALUES ('D105', '데이터마이그레이션팀');

COMMIT;

INSERT INTO TB_EMP_26 VALUES ('100001', '이경오', 'SQL개발자', 45000000, 'D101');
INSERT INTO TB_EMP_26 VALUES ('100002', '이동민', 'SQL개발자', 40000000, 'D101');

INSERT INTO TB_EMP_26 VALUES ('100003', '김철수', 'SQL개발자', 40000000, 'D102');
INSERT INTO TB_EMP_26 VALUES ('100004', '박상진', 'SQL개발자', 35000000, 'D102');


INSERT INTO TB_EMP_26 VALUES ('100005', '박은정', 'SQL개발자', 50000000, 'D103');
INSERT INTO TB_EMP_26 VALUES ('100006', '김다연', 'SQL개발자', 45000000, 'D103');


INSERT INTO TB_EMP_26 VALUES ('100007', '박수진', 'SQL개발자', 65000000, 'D104');
INSERT INTO TB_EMP_26 VALUES ('100008', '김성수', 'SQL개발자', 60000000, 'D104');

INSERT INTO TB_EMP_26 VALUES ('100009', '추상미', 'SQL개발자', 35000000, 'D105');
INSERT INTO TB_EMP_26 VALUES ('100010', '박나래', 'SQL개발자',30000000, 'D105');

COMMIT;             
        
        
--① 정답
SELECT
       COUNT(*) AS CNT
     , MAX(CUR_SAL) AS MAX_CUR_SAL
     , MIN(CUR_SAL) AS MIN_CUR_SAL
  FROM TB_EMP_26 A
     , TB_DEPT_26 B
WHERE A.DEPT_CD = B.DEPT_CD
GROUP BY GROUPING SETS(()) --전체합계
;

--② 정답
SELECT
       COUNT(*) AS CNT
     , MAX(CUR_SAL) AS MAX_CUR_SAL
     , MIN(CUR_SAL) AS MIN_CUR_SAL
  FROM TB_EMP_26 A
     , TB_DEPT_26 B
WHERE A.DEPT_CD = B.DEPT_CD
--전체합계임
;


--③
SELECT
       COUNT(*) AS CNT
     , MAX(CUR_SAL) AS MAX_CUR_SAL
     , MIN(CUR_SAL) AS MIN_CUR_SAL
  FROM TB_EMP_26 A
     , TB_DEPT_26 B --WHERE절 조건이 없어 카티션곱되어 카운트가 틀려짐
;

--④
SELECT 
       COUNT(*) AS CNT
     , MAX(CUR_SAL) AS MAX_CUR_SAL
     , MIN(CUR_SAL) AS MIN_CUR_SAL
  FROM TB_EMP_26 A
     , TB_DEPT_26 B
GROUP BY ROLLUP(A.CUR_SAL) --CUR_SAL별, 전체가 나오게됨
;

		
--문제28

DROP TABLE TB_EMP_28 ;

CREATE TABLE TB_EMP_28
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, JOB_NM VARCHAR2(150) NULL
, CUR_SAL NUMBER
, DEPT_CD CHAR(4)
, CONSTRAINT TB_EMP_28_PK PRIMARY KEY(EMP_NO)
)
;

INSERT INTO TB_EMP_28 VALUES ('100001', '이경오', 'SQL개발자', 45000000, 'D101');
INSERT INTO TB_EMP_28 VALUES ('100002', '이동민', 'SQL개발자', 40000000, 'D101');

INSERT INTO TB_EMP_28 VALUES ('100003', '김철수', 'SQL개발자', 40000000, 'D102');
INSERT INTO TB_EMP_28 VALUES ('100004', '박상진', 'SQL개발자', 35000000, 'D102');


INSERT INTO TB_EMP_28 VALUES ('100005', '박은정', 'SQL개발자', 50000000, 'D103');
INSERT INTO TB_EMP_28 VALUES ('100006', '김다연', 'SQL개발자', 45000000, 'D103');


INSERT INTO TB_EMP_28 VALUES ('100007', '박수진', 'SQL개발자', 65000000, 'D104');
INSERT INTO TB_EMP_28 VALUES ('100008', '김성수', 'SQL개발자', 60000000, 'D104');

INSERT INTO TB_EMP_28 VALUES ('100009', '추상미', 'SQL개발자', 35000000, 'D105');
INSERT INTO TB_EMP_28 VALUES ('100010', '박나래', 'SQL개발자', 30000000, 'D105');

COMMIT;

--<SQL문>
--각부서별 최고연봉 구하는 SQL
SELECT DEPT_CD 
     , MAX_CUR_SAL
FROM
(
SELECT DEPT_CD
     , MAX(CUR_SAL) OVER (PARTITION BY DEPT_CD) AS MAX_CUR_SAL --부서별 최고 연봉 
  FROM TB_EMP_28
) A
GROUP BY DEPT_CD, A.MAX_CUR_SAL
ORDER BY 1, 2
 ;

		
--문제29

DROP TABLE TB_EMP_29;

CREATE TABLE TB_EMP_29
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, SEX_CD CHAR(1)
, BIRTH_DE CHAR(8) NOT NULL
, DEPT_CD CHAR(4)
)
;

ALTER TABLE TB_EMP_29
ADD CONSTRAINT TB_EMP_29_PK PRIMARY KEY (EMP_NO);

INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00001', '이경오', '1', '19840718', 'D001');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00002', '이수지', '2', '19940502', 'D001');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00003', '박경민', '1', '19830414', 'D002');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00004', '최주연', '2', '19920508', 'D002');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00005', '최철순', '1', '19860112', 'D003');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00006', '이지연', '2', '19960218', 'D003');
INSERT INTO TB_EMP_29 (EMP_NO, EMP_NM, SEX_CD, BIRTH_DE, DEPT_CD) VALUES ('E00007', '차은영', '2', '19980218',  NULL );

COMMIT;

--<결과집합>
--EMP_NO EMP_NM                                             DEPT_CD
-------- -------------------------------------------------- -------
--E00001 이경오                                             D001
--E00002 이수지                                             D001
--E00003 박경민                                             D002
--E00004 최주연                                             D002
--E00005 최철순                                             D003
--E00006 이지연                                             D003
--E00007 차은영                                             NULL

--① 정답
SELECT EMP_NO, EMP_NM, DEPT_CD AS DEPT_CD
  FROM TB_EMP_29
ORDER BY EMP_NO;


--②
SELECT EMP_NO, EMP_NM, LAG(DEPT_CD) OVER(ORDER BY DEPT_CD) AS DEPT_CD --'이경오'는 이전값이 존재하지 않아서 '이경오'가 널이 나옴, EMP_NO 기준 정렬
  FROM TB_EMP_29
ORDER BY EMP_NO;

--③
SELECT EMP_NO, EMP_NM, LEAD(DEPT_CD) OVER(ORDER BY DEPT_CD) AS DEPT_CD --'이지연'은 다음값이 존재하지 않아서 '이지연'이 널이 나옴, --'차은영'도 다음값이 존재하지 않아서 널이 나옴
  FROM TB_EMP_29
ORDER BY EMP_NO;

--④
SELECT EMP_NO, EMP_NM, LAG(DEPT_CD) OVER(ORDER BY DEPT_CD) AS DEPT_CD ----'이경오'는 이전값이 존재하지 않아서 '이경오'가 널이 나옴, DEPT_CD 기준 정렬
  FROM TB_EMP_29
ORDER BY DEPT_CD;

		
--문제30

DROP TABLE TB_EMP_30;

CREATE TABLE TB_EMP_30
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, JOB_NM VARCHAR2(150) NULL
, CUR_SAL NUMBER
, DEPT_CD CHAR(4)
, CONSTRAINT TB_EMP_30_PK PRIMARY KEY(EMP_NO)
)
;


INSERT INTO TB_EMP_30 VALUES ('100001', '이경오', 'SQL개발자'     , 80000000, 'D101');
INSERT INTO TB_EMP_30 VALUES ('100002', '이동민', '프로시저개발자', 60000000, 'D101');

INSERT INTO TB_EMP_30 VALUES ('100003', '김철수', '리눅스엔지니어', 40000000, 'D102');
INSERT INTO TB_EMP_30 VALUES ('100004', '박상진', '윈도우엔지니어', 20000000, 'D102');

COMMIT;

--<SQL문>

SELECT SUM(CUR_SAL)/10000 --1억 나누기 1만 = 10000
 FROM
    (
      SELECT A.EMP_NO
           , A.EMP_NM
           , LAG(CUR_SAL) OVER(ORDER BY CUR_SAL) AS LAG_CUR_SAL --'박상진'은 다음 연봉값이 없음 (연봉이 가장 적어서) 2천만
           , LEAD(CUR_SAL) OVER(ORDER BY CUR_SAL) AS LEAD_CUR_SAL --'이경오'는 이전 연봉값이 없음(연봉이 가장 높아서) 8천만
           , CUR_SAL
        FROM TB_EMP_30 A
       ORDER BY A.EMP_NO
    ) A
WHERE LAG_CUR_SAL IS NULL
   OR LEAD_CUR_SAL IS NULL
;

			
--문제31

CONN SYSTEM/1234  --ⓐ

CREATE USER DCL IDENTIFIED BY 1234; --ⓑ
GRANT CONNECT, RESOURCE, DBA TO DCL; --ⓒ

CONN DCL/1234 --ⓓ

CREATE TABLE DCL_TABLE_31 --ⓔ
(
    DCL_COL1 NUMBER
)
;

INSERT INTO DCL_TABLE_31 VALUES (1); --ⓕ

COMMIT; --ⓖ

DROP TABLE DCL_TABLE_31 PURGE; --ⓗ --아무리 이 단계에서 테이블을 DROP해도
 
DROP USER DCL; --ⓘ --자기가 자기자신을 자신을 지울수 없음 

		
--문제32		        

GRANT CREATE TABLE TO DCL;
REVOKE CREATE TABLE FROM DCL;
		
--문제33

DROP TABLE TB_EMP_33;
DROP TABLE TB_DEPT_33;

CREATE TABLE TB_DEPT_33
(
  DEPT_CD CHAR(4)
, DEPT_NM VARCHAR2(150)
, CONSTRAINT TB_DEPT_33_PK PRIMARY KEY(DEPT_CD)
)
;

INSERT INTO TB_DEPT_33 VALUES ('D101', '데이터시각화');
INSERT INTO TB_DEPT_33 VALUES ('D102', '데이터엔지니어링팀');
INSERT INTO TB_DEPT_33 VALUES ('D103', '데이터분석팀');

COMMIT;

CREATE TABLE TB_EMP_33
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50)
, DEPT_CD CHAR(4)
, CONSTRAINT TB_EMP_33_PK PRIMARY KEY(EMP_NO)
)
;

INSERT INTO TB_EMP_33 VALUES ('100001', '이경오', 'D101' );
INSERT INTO TB_EMP_33 VALUES ('100002', '이수진', 'D101' );
INSERT INTO TB_EMP_33 VALUES ('100003', '권수철', 'D102' );
INSERT INTO TB_EMP_33 VALUES ('100004', '이지은', 'D102' );
INSERT INTO TB_EMP_33 VALUES ('100005', '정수라', 'D103' );
INSERT INTO TB_EMP_33 VALUES ('100006', '김연정',  NULL  );

COMMIT;

ALTER TABLE TB_EMP_33
ADD CONSTRAINTS TB_EMP_33_FK FOREIGN KEY (DEPT_CD)
REFERENCES TB_DEPT_33(DEPT_CD);

DROP FUNCTION FN_EMP_CNT_BY_DEPT_CD_33; 
CREATE OR REPLACE FUNCTION FN_EMP_CNT_BY_DEPT_CD_33(IN_DEPT_CD IN TB_DEPT_33.DEPT_CD%TYPE)
RETURN NUMBER IS V_EMP_CNT NUMBER;

BEGIN
SELECT COUNT(*) CNT
  INTO V_EMP_CNT
  FROM TB_EMP_33
 WHERE DEPT_CD = IN_DEPT_CD
    OR NVL(DEPT_CD, '0000') = NVL(IN_DEPT_CD, '0000') --DEPT_CD가 널인 경우 '0000'으로 치환하여 비교 
 ;

RETURN V_EMP_CNT;
END;
/
;

--<SQL문>
SELECT A.EMP_NO
     , A.DEPT_CD
     , B.DEPT_NM
     , FN_EMP_CNT_BY_DEPT_CD_33(A.DEPT_CD) EMP_CNT --DEPT_CD가 널인 사원의 카운트도 계산됨 
  FROM TB_EMP_33 A
     , TB_DEPT_33 B
WHERE A.DEPT_CD = B.DEPT_CD(+)
ORDER BY A.EMP_NO
;


    
--문제37
DROP TABLE TB_EMP_37; 

CREATE TABLE TB_EMP_37
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, SEX_CD CHAR(2) NOT NULL
, BIRTH_DT CHAR(8) NOT NULL
, JOB_CD CHAR(4) NULL
, DEPT_CD CHAR(4) NULL
, CONSTRAINT TB_EMP_37_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_37
SELECT
      LPAD(ROWNUM, 6, '0') AS EMP_NO
    , DBMS_RANDOM.STRING('U', 6)
    , TO_CHAR(CEIL(MOD(DBMS_RANDOM.VALUE(1, 1000), 2)))
    , TO_CHAR(SYSDATE - DBMS_RANDOM.VALUE(1, 3650), 'YYYYMMDD')
    , LPAD(TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1, 10))), 4, '0')
    , LPAD(TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1, 10))), 4, '0')
FROM DUAL CONNECT BY LEVEL <= 100000;

COMMIT;

ALTER SESSION SET STATISTICS_LEVEL = ALL; 


SELECT * /* 2_37_TEST_1 */ 
  FROM TB_EMP_37
  WHERE BIRTH_DT BETWEEN '20170101' AND '20191231'
    AND DEPT_CD = '0001'
    AND JOB_CD = '0002'
    AND SEX_CD <> '1'
;

SELECT SUBSTR(SQL_TEXT, 1, 30) SQL_TEXT,
       SQL_ID
     , CHILD_NUMBER
  FROM V$SQL
 WHERE SQL_TEXT LIKE '%2_37_TEST_1%'
   AND SQL_TEXT NOT LIKE '%V$SQL%'
  ;

 SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR('0kunu8chh6w7v', 0, 'ALLSTATS LAST'));


SQL_ID  0kunu8chh6w7v, child number 0
-------------------------------------
SELECT * /* 2_37_TEST_1 */ 
   FROM TB_EMP_37
   WHERE BIRTH_DT BETWEEN 
'20170101' AND '20191231'
     AND DEPT_CD = '0001'
     AND JOB_CD = 
'0002'
     AND SEX_CD <> '1'

 
Plan hash value: 3091041155
 
-----------------------------------------------------------------------------------------
| Id  | Operation         | Name      | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
-----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |           |      1 |        |    190 |00:00:00.01 |     622 |
|*  1 |  TABLE ACCESS FULL| TB_EMP_37 |      1 |    190 |    190 |00:00:00.01 |     622 |
-----------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(("DEPT_CD"='0001' AND "JOB_CD"='0002' AND "BIRTH_DT">='20170101' 
              AND "SEX_CD"<>'1' AND "BIRTH_DT"<='20191231'))
 

--<테스트>
		
CREATE INDEX IDX_TB_EMP_37_01 ON TB_EMP_37(DEPT_CD, JOB_CD, BIRTH_DT);
ANALYZE TABLE TB_EMP_37 COMPUTE STATISTICS FOR ALL INDEXES;


ALTER SESSION SET STATISTICS_LEVEL = ALL; 


SELECT /*+ INDEX(TB_EMP_37 IDX_TB_EMP_37_01) */ /* 2_37_TEST_2 */ 
       *
  FROM TB_EMP_37
 WHERE BIRTH_DT BETWEEN '20170101' AND '20191231'
   AND DEPT_CD = '0001'
   AND JOB_CD = '0002'
   AND SEX_CD <> '1'
;

SELECT SUBSTR(SQL_TEXT, 1, 30) SQL_TEXT,
       SQL_ID
     , CHILD_NUMBER
  FROM V$SQL
 WHERE SQL_TEXT LIKE '%2_37_TEST_2%'
   AND SQL_TEXT NOT LIKE '%V$SQL%'
  ;

 SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR('f5vvvw8b1xjwt', 0, 'ALLSTATS LAST'));

SQL_ID  f5vvvw8b1xjwt, child number 0
-------------------------------------
SELECT /*+ INDEX(TB_EMP_37 IDX_TB_EMP_37_01) */ /* 2_37_TEST_2 */ 
     
   *
   FROM TB_EMP_37
  WHERE BIRTH_DT BETWEEN '20170101' AND 
'20191231'
    AND DEPT_CD = '0001'
    AND JOB_CD = '0002'
    AND 
SEX_CD <> '1'

 
Plan hash value: 3463991687
 
------------------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name             | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                  |      1 |        |    190 |00:00:00.01 |     372 |
|*  1 |  TABLE ACCESS BY INDEX ROWID BATCHED| TB_EMP_37        |      1 |    190 |    190 |00:00:00.01 |     372 |
|*  2 |   INDEX RANGE SCAN                  | IDX_TB_EMP_37_01 |      1 |    378 |    350 |00:00:00.01 |      23 |
------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter("SEX_CD"<>'1')
   2 - access("DEPT_CD"='0001' AND "JOB_CD"='0002' AND "BIRTH_DT">='20170101' AND "BIRTH_DT"<='20191231')
 

CREATE INDEX IDX_TB_EMP_37_02 ON TB_EMP_37(SEX_CD);

ALTER SESSION SET STATISTICS_LEVEL = ALL; 

SELECT /*+ INDEX(TB_EMP_37 IDX_TB_EMP_37_02) */ /* 2_37_TEST_3 */ 
       *
  FROM TB_EMP_37
  WHERE BIRTH_DT BETWEEN '20170101' AND '20191231'
    AND DEPT_CD = '0001'
    AND JOB_CD = '0002'
    AND SEX_CD <> '1'
;

SELECT SUBSTR(SQL_TEXT, 1, 30) SQL_TEXT,
       SQL_ID
     , CHILD_NUMBER
  FROM V$SQL
 WHERE SQL_TEXT LIKE '%2_37_TEST_3%'
   AND SQL_TEXT NOT LIKE '%V$SQL%'
  ;

 SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR('cw7yndqtj3s3w', 0, 'ALLSTATS LAST'));
 
SQL_ID  cw7yndqtj3s3w, child number 0
-------------------------------------
SELECT /*+ INDEX(TB_EMP_37 IDX_TB_EMP_37_02) */ /* 2_37_TEST_3 */ 
     
   *
   FROM TB_EMP_37
   WHERE BIRTH_DT BETWEEN '20170101' AND 
'20191231'
     AND DEPT_CD = '0001'
     AND JOB_CD = '0002'
     AND 
SEX_CD <> '1'

 
Plan hash value: 2247618533
 
---------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name             | Starts | E-Rows | A-Rows |   A-Time   | Buffers | Reads  |
---------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                  |      1 |        |    190 |00:00:00.04 |     798 |    195 |
|*  1 |  TABLE ACCESS BY INDEX ROWID BATCHED| TB_EMP_37        |      1 |    190 |    190 |00:00:00.04 |     798 |    195 |
|*  2 |   INDEX FULL SCAN                   | IDX_TB_EMP_37_02 |      1 |  50162 |  50162 |00:00:00.02 |     215 |    195 |
---------------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(("DEPT_CD"='0001' AND "JOB_CD"='0002' AND "BIRTH_DT">='20170101' AND "BIRTH_DT"<='20191231'))
   2 - filter("SEX_CD"<>'1')
 
   

		
--문제38

DROP TABLE TB_EMP_38; 

CREATE TABLE TB_EMP_38
(
  EMP_NO CHAR(6)
, EMP_NM VARCHAR2(50) NOT NULL
, SEX_CD CHAR(2) NOT NULL
, BIRTH_DT CHAR(8) NOT NULL
, JOB_CD CHAR(4) NULL
, DEPT_CD CHAR(4) NULL
, CONSTRAINT TB_EMP_38_PK PRIMARY KEY (EMP_NO)
)
;

INSERT INTO TB_EMP_38
SELECT
      LPAD(ROWNUM, 6, '0') AS EMP_NO
    , DBMS_RANDOM.STRING('U', 6)
    , TO_CHAR(CEIL(MOD(DBMS_RANDOM.VALUE(1, 1000), 2)))
    , TO_CHAR(SYSDATE - DBMS_RANDOM.VALUE(1, 3650), 'YYYYMMDD')
    , LPAD(TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1, 10))), 4, '0')
    , LPAD(TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1, 10))), 4, '0')
FROM DUAL CONNECT BY LEVEL <= 100000;

COMMIT;
		
ALTER SESSION SET STATISTICS_LEVEL = ALL; 

--<SQL문>
SELECT /*+ INDEX(TB_EMP_38 IDX_TB_EMP_38_01) */ /* 2_38_TEST_1 */ 
    *
FROM TB_EMP_38
WHERE BIRTH_DT BETWEEN '20200101' AND '20201231'
AND SEX_CD = '1'
AND JOB_CD = '0007'
AND DEPT_CD = '0007'
;

SELECT SUBSTR(SQL_TEXT, 1, 30) SQL_TEXT,
       SQL_ID
     , CHILD_NUMBER
  FROM V$SQL
 WHERE SQL_TEXT LIKE '%2_38_TEST_1%'
   AND SQL_TEXT NOT LIKE '%V$SQL%'
  ;



SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR('ft8m8bc901jxq', 0, 'ALLSTATS LAST'));


SQL_ID  ft8m8bc901jxq, child number 0
-------------------------------------
--<SQL문>
 SELECT /*+ INDEX(TB_EMP_38 IDX_TB_EMP_38_01) */ /* 
2_38_TEST_1 */ 
     *
 FROM TB_EMP_38
 WHERE BIRTH_DT BETWEEN 
'20200101' AND '20201231'
 AND SEX_CD = '1'
 AND JOB_CD = '0007'
 AND 
DEPT_CD = '0007'

 
Plan hash value: 1329926989
 
-----------------------------------------------------------------------------------------
| Id  | Operation         | Name      | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
-----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |           |      1 |        |     46 |00:00:00.01 |     604 |
|*  1 |  TABLE ACCESS FULL| TB_EMP_38 |      1 |     30 |     46 |00:00:00.01 |     604 |
-----------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(("SEX_CD"='1' AND "JOB_CD"='0007' AND "DEPT_CD"='0007' AND 
              "BIRTH_DT">='20200101' AND "BIRTH_DT"<='20201231'))
 
Note
-----
   - dynamic statistics used: dynamic sampling (level=2)
 
 


--<테스트>
CREATE INDEX IDX_TB_EMP_38_01 ON TB_EMP_38(BIRTH_DT);
ANALYZE TABLE TB_EMP_38 COMPUTE STATISTICS FOR ALL INDEXES;

ALTER SESSION SET STATISTICS_LEVEL = ALL; 

SELECT /*+ INDEX(TB_EMP_38 IDX_TB_EMP_38_01) */ /* 2_38_TEST_2 */ 
        *
  FROM TB_EMP_38
 WHERE BIRTH_DT BETWEEN '20200101' AND '20201231'
   AND SEX_CD = '1'
   AND JOB_CD = '0007'
   AND DEPT_CD = '0007'
;

SELECT SUBSTR(SQL_TEXT, 1, 30) SQL_TEXT,
       SQL_ID
     , CHILD_NUMBER
  FROM V$SQL
 WHERE SQL_TEXT LIKE '%2_38_TEST_2%'
   AND SQL_TEXT NOT LIKE '%V$SQL%'
  ;

 SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR('5cc8167nfw4mv', 0, 'ALLSTATS LAST'));


SQL_ID  5cc8167nfw4mv, child number 0
-------------------------------------
SELECT /*+ INDEX(TB_EMP_38 IDX_TB_EMP_38_01) */ /* 2_38_TEST_2 */ 
     
    *
   FROM TB_EMP_38
  WHERE BIRTH_DT BETWEEN '20200101' AND 
'20201231'
    AND SEX_CD = '1'
    AND JOB_CD = '0007'
    AND DEPT_CD 
= '0007'

 
Plan hash value: 1521497282
 
------------------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name             | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                  |      1 |        |     46 |00:00:00.01 |    8006 |
|*  1 |  TABLE ACCESS BY INDEX ROWID BATCHED| TB_EMP_38        |      1 |     30 |     46 |00:00:00.01 |    8006 |
|*  2 |   INDEX RANGE SCAN                  | IDX_TB_EMP_38_01 |      1 |   9557 |   8161 |00:00:00.01 |      29 |
------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(("SEX_CD"='1' AND "JOB_CD"='0007' AND "DEPT_CD"='0007'))
   2 - access("BIRTH_DT">='20200101' AND "BIRTH_DT"<='20201231')
 
Note
-----
   - dynamic statistics used: dynamic sampling (level=2)
 
   

     															   						  																			 			              		  							